<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-04-10T16:10:23-05:00</updated><id>/feed.xml</id><entry><title type="html">Data Wrangling</title><link href="/2021/02/18/Data-Models.html" rel="alternate" type="text/html" title="Data Wrangling" /><published>2021-02-18T00:00:00-06:00</published><updated>2021-02-18T00:00:00-06:00</updated><id>/2021/02/18/Data-Models</id><content type="html" xml:base="/2021/02/18/Data-Models.html">&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/headers/ship-ropes.jpg&quot; alt=&quot;Ropes and Knots on a Ship&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageSourceCaption&quot;&gt;&lt;a href=&quot;https://unsplash.com/photos/u-qKOduhSqg&quot;&gt;&lt;u&gt;Image Source&lt;/u&gt;&lt;/a&gt;&lt;/figcaption&gt;

&lt;p&gt;So, at this point I have 6 levels x 100 JSON files per level = 600 JSON files filled with raw data, not in a super nice format, and also containing data we don’t need. We need a way to organize all of this data for our app! &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;The first thing I did was convert each JSON into a more nicely formatted JSON for my app’s purposes. To decide on what this “nice format” would be, I designed a “data model” for my app in Xcode, Apple’s open-source software for iOS development:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/data-model.png&quot; alt=&quot;Data Model&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Data model for crossword data - each table represents a specific piece of data and has relationships with the other tables&lt;/figcaption&gt;

&lt;p&gt;The data model basically shows how I want my data to be organized in my app. For example, each Level (Beginner I, Beginner II, etc.) contains information about its current ID, name, number of puzzles for that level, etc. In addition, it has a relationship with Puzzle. Specifically, each Level contains many Puzzles (double arrowhead), but each Puzzle only has one Level it’s associated with (single arrowhead).&lt;/p&gt;

&lt;p&gt;I also have Words and Cells in my data model, which are exactly what you think they are. Finally, I have UserInfo which I will use to store any user-specific information. It is also connected to all the Completed Puzzles that the user has finished. These two tables are separate from the other four because I want to store them in the cloud (while all others are only stored locally). This ensures that only a small amount of the user’s iCloud storage space is used while also allowing them to sync which puzzles have been completed across devices.&lt;/p&gt;

&lt;p&gt;Now that I know how I want my app’s data to be structured, I should reformat my raw JSON data into a format that looks similar. This will make importing the data into the app from these files more painless.&lt;/p&gt;

&lt;p&gt;To do this, I wrote a few python scripts to format and merge the 600 raw data files (JSON) into a single big JSON file that has the data formatted similarly to how it will be in my app. Here is a part of that final JSON file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/formatted-json-puzzle-data.jpg&quot; alt=&quot;Formatted JSON Puzzle Data&quot; class=&quot;blogVerticalImage bigImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Final complete JSON file containing puzzle data for 600 puzzles&lt;/figcaption&gt;

&lt;p&gt;You can see that the structure in this file nicely tracks that of my data model (e.g. level_data -&amp;gt; puzzles -&amp;gt; words). Note that I didn’t include “Cells” in this data file (even though it’s in my data model). I’ll just create each Cell data object within the app, while initially loading the list of words for each puzzle.&lt;/p&gt;

&lt;p&gt;If you are curious about the code I used for all this data processing and crossword generation, see my &lt;a href=&quot;https://github.com/jonstrutz11/KameKurosuPuzzleGeneration&quot;&gt;&lt;u&gt;GitHub repository here&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that I have my final data file for all the puzzles which I will import in my app, I can start to actually build my app!&lt;/p&gt;</content><author><name></name></author><category term="KameKurosu" /><summary type="html">Image Source So, at this point I have 6 levels x 100 JSON files per level = 600 JSON files filled with raw data, not in a super nice format, and also containing data we don’t need. We need a way to organize all of this data for our app!</summary></entry><entry><title type="html">Crossword Creation</title><link href="/2021/02/10/Crossword-Generation.html" rel="alternate" type="text/html" title="Crossword Creation" /><published>2021-02-10T00:00:00-06:00</published><updated>2021-02-10T00:00:00-06:00</updated><id>/2021/02/10/Crossword-Generation</id><content type="html" xml:base="/2021/02/10/Crossword-Generation.html">&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/headers/printing-press-letters.jpg&quot; alt=&quot;Printing Press Letter Blocks&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageSourceCaption&quot;&gt;&lt;a href=&quot;https://unsplash.com/photos/BVyNlchWqzs&quot;&gt;&lt;u&gt;Image Source&lt;/u&gt;&lt;/a&gt;&lt;/figcaption&gt;

&lt;p&gt;The next step was to create the levels. It turns out that crosswords aren’t easy to make. And I’m definitely not planning on making them all by hand… &lt;!--more--&gt;That said, I looked for programs that could automatically create them for me! After a lot of digging, I found a Japanese crossword program called クロスワード　ギバー (literally, Crossword Giver). Since it uses a lot of difficult Japanese words, it took some time for me to figure it out, but basically its a program where you provide it a clue list and an answer list and it will autogenerate a crossword for you! Here are some screenshots:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/crossword-giver.jpg&quot; alt=&quot;Crossword Giver Program&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Main screen of Crossword Giver after generating a crossword with clues (to the right)&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/crossword-giver-generation.jpg&quot; alt=&quot;Crossword Giver Generation Menu&quot; class=&quot;blogVerticalImage bigImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Menu to generate a crossword using Crossword Giver. You can select # rows, # columns, and a dictionary of clues/answers, among other options.&lt;/figcaption&gt;

&lt;p&gt;However, I still had to (a) get a list of clues, i.e. kanji-containing words, (b) get a list of their respective answers, i.e. the readings, and (c) find a way to automate using Crossword Giver to make many many crosswords without me having to click a bunch of buttons over and over again.&lt;/p&gt;

&lt;h2 id=&quot;clue-and-answer-generation&quot;&gt;Clue and Answer Generation&lt;/h2&gt;

&lt;p&gt;For (a) and (b), I started by thinking about the types of words I wanted to include. I knew that I wanted to split up the words by level, but how do I know which words are “easy” and which words are “hard”?&lt;/p&gt;

&lt;p&gt;Well, in Japanese, there is a system to measure Japanese ability called JLPT (Japanese Language Proficiency Test). N5 is the easiest level, and it goes up to N1, the hardest level. However, there are also many more advanced words not included even in N1. I decided to roughly group my words based on their JLPT level. However, first I needed a complete list of Japanese words.&lt;/p&gt;

&lt;p&gt;For this, after some digging, I came across a program called zkanji. It turns out that this tool lets you export word lists! It also lets you generate word lists based on the JLPT level of the word and/or the kanji in the word. It took me a while to figure out, but eventually I used the program to export a huge word list (around 25,000 words), with each word’s frequency and JLPT level annotated. I used these two criteria to sort the words into my 6 difficulty levels, as specified in the following table:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/kamekurosu-levels-table.jpg&quot; alt=&quot;Table with Level Descriptions&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Criteria for words included in each difficulty level as well as crossword size&lt;/figcaption&gt;

&lt;p&gt;To decide on the cutoffs in this table for each level, I plotted the distribution of word frequencies for each level. Basically, I wanted to know: Are N5 (easiest JLPT level) the most frequent Japanese words, and are N1 the least frequent? Intuition would say yes, but I wanted to make sure.&lt;/p&gt;

&lt;p&gt;Here is that plot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/jlpt-dists-stacked.png&quot; alt=&quot;Histogram of Japanese Words by JLPT Level&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;In the histogram of 25,000 &quot;common&quot; words in Japanese, you can see that N1-N5 words tend to be more common (to the left on the graph) while non-JLPT words (N-) tend to be less common. However, many of the most common words are still dominated by harder JLPT levels (N1, N2, N3), mainly because N4 and N5 just have so few words overall.&lt;/figcaption&gt;

&lt;p&gt;Each number on the x-axis represents a single Japanese word, where the higher a number is, the less frequent that word. Therefore, the most common word is at 1, and the least common is at ~25,000. I then plotted the distribution of each JLPT level as a stacked bar chart.&lt;/p&gt;

&lt;p&gt;The results were actually a bit surprising. I expected to see all the N5 words (blue bars) mainly be distributed to the left of other JLPT levels. However, it seems like N5-N1 all contains many less frequent words, with N3 (middle JLPT level) actually containing the most high frequency words! Something else that was unexpected is that there is a “bump” at the tail end of each JLPT group around 20k-25k. This is likely due to words being included in JLPT lists that are used for testing language ability but not really used in every day life. Finally, in case you were wondering why each bar doesn’t sum to 1,000, that is just because there can be duplicate words of a given frequency and also because many words were filtered out from the frequency list that just had one syllable (e.g. 歯＝は＝ha=tooth).&lt;/p&gt;

&lt;p&gt;What did match up with expectations though, is the brown curve, which represents all non-JLPT words. As expected, the vast majority of these non-JLPT words are quite infrequent. Thus, these words will only be used in the final level, Advanced II.&lt;/p&gt;

&lt;p&gt;Because many of the most frequent words were found in N4, N3, N2, and N1 (i.e. not just N5), I decided to group words based on whether they are (1) frequent enough for that level OR (2) at an appropriate JLPT level. The cutoffs in the level table above capture this idea.&lt;/p&gt;

&lt;p&gt;At this point, I also decided on how big to make the puzzles for each level (also included in the table above). Because the beginner levels have a smaller word bank to choose from to build the puzzles, I had to keep the puzzles smaller or else Crossword Giver would error out.&lt;/p&gt;

&lt;p&gt;Once this was complete, I had a defined set of cutoffs (i.e. a list of words) for each level. I then found a way to complete task (c), automating the Crossword Giver program to generate crossword puzzles.&lt;/p&gt;

&lt;h2 id=&quot;automating-crossword-generation&quot;&gt;Automating Crossword Generation&lt;/h2&gt;

&lt;p&gt;I did this by writing some python code that simulates keystrokes. Because you can use hotkeys to control Crossword Giver, I didn’t have to worry about simulating mouse clicks or cursor movements. I used a python library called pynput for this task. Here is what the code looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/xword-generation-code.jpg&quot; alt=&quot;Crossword Generation Code&quot; class=&quot;blogVerticalImage bigImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Beginning of the python script I wrote to automate crossword generation using the Crossword Giver software, as shown in the GIF below&lt;/figcaption&gt;

&lt;p&gt;Even if you have never read code before, you can probably understand most of this! Python is a very expressive programming language, meaning it reads similarly to the English language (at least, compared to older programming languages like C).&lt;/p&gt;

&lt;p&gt;Here is a GIF of the python script in action. It requires no input from me. I just type the command to run it and go do something else for a few hours.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/xword-generation.gif&quot; alt=&quot;Crossword Generation GIF&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Crosswords getting generated and saved without any user input, just based on the script I wrote (see above)&lt;/figcaption&gt;

&lt;p&gt;I used my python script to simulate the generation of 100 crosswords at each level (600 total). Sometimes, however, I would get an error so I did have to go back and manually click through Crossword Giver to create a few crosswords for each level, but this was much better than making all 100 that way! It will also make it very easy for me to add more puzzles in the future.&lt;/p&gt;

&lt;p&gt;Each puzzle was saved as a JSON file. If you don’t know what JSON is, it is basically just a file type that stores data in a hierarchy. Here is an example puzzle file (in JSON format):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/unformatted-json-puzzle-data.jpg&quot; alt=&quot;Puzzle JSON Data from Crossword Giver&quot; class=&quot;blogVerticalImage bigImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Top part of JSON file for the very first puzzle. You can see that it has the data laid out in a hierarchical format.&lt;/figcaption&gt;

&lt;p&gt;While this file contains all the data we need to recreate this puzzle, it’s not in the nicest format. It also has extra information we don’t need in the app, like “notes” and “has_hints”. That said, the next thing I did was process this data (again, using python) into a nicer format!&lt;/p&gt;</content><author><name></name></author><category term="KameKurosu" /><summary type="html">Image Source The next step was to create the levels. It turns out that crosswords aren’t easy to make. And I’m definitely not planning on making them all by hand…</summary></entry><entry><title type="html">Some Business Stuff</title><link href="/2021/02/06/Business-Stuff.html" rel="alternate" type="text/html" title="Some Business Stuff" /><published>2021-02-06T00:00:00-06:00</published><updated>2021-02-06T00:00:00-06:00</updated><id>/2021/02/06/Business-Stuff</id><content type="html" xml:base="/2021/02/06/Business-Stuff.html">&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/headers/hakone-shrine.jpg&quot; alt=&quot;Hakone Shrine&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageSourceCaption&quot;&gt;&lt;a href=&quot;https://unsplash.com/photos/SBK40fdKbAg&quot;&gt;&lt;u&gt;Image Source&lt;/u&gt;&lt;/a&gt;&lt;/figcaption&gt;

&lt;p&gt;After finishing my mock-ups, I decided to take a break and focus on more business-related tasks. &lt;!--more--&gt;The first was getting an apple developer account, so that I could use Apple’s cloud database service for my users’ level completion data, and so I could eventually publish the app to the App Store. In order to do this, I needed an e-mail. I thought about using my personal e-mail for a bit, but then thought a better decision might be to create a new e-mail specifically for these types of projects.&lt;/p&gt;

&lt;p&gt;I decided to create a Google Business e-mail with the name KamesamaApps@gmail.com. I chose to name this business (if you can even call it a business) Kamesama Apps, a play on words, as Kamisama means God or spirit in Japan, but changing Kami to Kame switches it to something that sounds more like “Sacred Turtle”, haha.&lt;/p&gt;

&lt;p&gt;I also created a super basic business website, although I’m not going to share it here because it has basically no content right now and doesn’t look great…&lt;/p&gt;

&lt;p&gt;Finally, I thought about potential pricing plans for my app. I thought about making it a simple paid app vs doing in-app purchases, but because my app has different levels, which might appeal to different users, I decided to go with separate in-app purchases for each level. I plan on having 6 levels: Beginner I &amp;amp; II, Intermediate I &amp;amp; II, and Advanced I &amp;amp; II. I’m currently thinking I’ll make the first 20 puzzles free for each level, and then make the rest (80 additional puzzles in the first version of the app) a $1 in-app purchase. I will also include an option to buy all 6 levels for $5 ($1 off). All purchases will cover all future levels added as well in later versions of the app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/IAP_table.jpg&quot; alt=&quot;IAP Table&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Table of planned In-App-Purchases (IAPs)&lt;/figcaption&gt;

&lt;p&gt;The one downside of in-app purchases is that Apple takes a bigger cut of your revenue vs doing a simple paid app. However, the upside is that your users only pay for the parts they want and they can download your app for free to check it out before deciding whether to purchase. This second factor alone usually allows you to generate significantly more revenue, even though Apple takes a bigger cut.&lt;/p&gt;

&lt;p&gt;With a basic pricing plan and other business tasks out of the way, the next step was to actually start coding!&lt;/p&gt;</content><author><name></name></author><category term="KameKurosu" /><summary type="html">Image Source After finishing my mock-ups, I decided to take a break and focus on more business-related tasks.</summary></entry><entry><title type="html">Fancy Pen &amp;amp; Paper</title><link href="/2021/01/31/App-Mockups.html" rel="alternate" type="text/html" title="Fancy Pen &amp;amp; Paper" /><published>2021-01-31T00:00:00-06:00</published><updated>2021-01-31T00:00:00-06:00</updated><id>/2021/01/31/App-Mockups</id><content type="html" xml:base="/2021/01/31/App-Mockups.html">&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/headers/fancy-pen-and-paper.jpg&quot; alt=&quot;Pen and Paper&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageSourceCaption&quot;&gt;&lt;a href=&quot;https://unsplash.com/photos/xG8IQMqMITM&quot;&gt;&lt;u&gt;Image Source&lt;/u&gt;&lt;/a&gt;&lt;/figcaption&gt;

&lt;p&gt;The next step was to make more realistic-looking mockups. I used a program called &lt;a href=&quot;https://www.sketch.com/&quot;&gt;&lt;u&gt;Sketch&lt;/u&gt;&lt;/a&gt; (for Mac) to create all the mockups. Here are the results! &lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;mockups-version-1&quot;&gt;Mockups, Version 1&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/mockup-v1-splash-screen.png&quot; alt=&quot;Splash Screen Mockup v1&quot; class=&quot;blogVerticalImagePairLeft&quot; /&gt;
&lt;img src=&quot;/assets/images/blog-kamekurosu/mockup-v1-main-menu-view.png&quot; alt=&quot;Main Menu Screen Mockup v1&quot; class=&quot;blogVerticalImagePairRight&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/mockup-v1-level-begin-splash-screen.png&quot; alt=&quot;Level Begin Splash Screen Mockup v1&quot; class=&quot;blogVerticalImagePairLeft&quot; /&gt;
&lt;img src=&quot;/assets/images/blog-kamekurosu/mockup-v1-crossword-view.png&quot; alt=&quot;Crossword Screen Mockup v1&quot; class=&quot;blogVerticalImagePairRight&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I basically just took my drawings (from the &lt;a href=&quot;/2021/01/15/Initial-App-Design.html&quot;&gt;last blog post&lt;/a&gt;) and used Sketch to make each of these screens. Note that I changed a few things from my initial drawings as I was making these mockups, but overall they are very similar.&lt;/p&gt;

&lt;h2 id=&quot;mockups-version-2&quot;&gt;Mockups, Version 2&lt;/h2&gt;

&lt;p&gt;After I had these mockups done, I got a bunch of feedback from family and friends - thanks so much, guys! This led me to redesign each screen. I eventually settled on the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/mockup-v2-splash-screen.png&quot; alt=&quot;Splash Screen Mockup v2&quot; class=&quot;blogVerticalImagePairLeft&quot; /&gt;
&lt;img src=&quot;/assets/images/blog-kamekurosu/mockup-v2-main-menu-view.png&quot; alt=&quot;Main Menu Screen Mockup v2&quot; class=&quot;blogVerticalImagePairRight&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/mockup-v2-level-begin-splash-screen.png&quot; alt=&quot;Level Begin Splash Screen Mockup v2&quot; class=&quot;blogVerticalImagePairLeft&quot; /&gt;
&lt;img src=&quot;/assets/images/blog-kamekurosu/mockup-v2-crossword-view.png&quot; alt=&quot;Crossword Screen Mockup v2&quot; class=&quot;blogVerticalImagePairRight&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it looks a bit more fluid, has some extra :turtle: turtle art, and while I didn’t change the colors used much, I changed how I used each color to make it pop a bit more.&lt;/p&gt;

&lt;h2 id=&quot;music&quot;&gt;Music&lt;/h2&gt;

&lt;p&gt;While I was getting feedback from friends/family, Isami (my awesome brother-in-law) offered to help out by creating some music and sound effects for the app. He’s a super musical and creative guy, so I’m excited to see what he comes up with! Having good music will definitely make the app more appealing to potential users.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;That’s it! This has been a pretty short post - however, a &lt;strong&gt;lot&lt;/strong&gt; of effort went into creating these mockups (around 20 hours or so). I’m really happy with how they turned out, though. Now that I have a good idea of how I want the app to look and behave, I can start getting more into the nitty gritty details of coding it up!&lt;/p&gt;</content><author><name></name></author><category term="KameKurosu" /><summary type="html">Image Source The next step was to make more realistic-looking mockups. I used a program called Sketch (for Mac) to create all the mockups. Here are the results!</summary></entry><entry><title type="html">Pen &amp;amp; Paper</title><link href="/2021/01/15/Initial-App-Design.html" rel="alternate" type="text/html" title="Pen &amp;amp; Paper" /><published>2021-01-15T00:00:00-06:00</published><updated>2021-01-15T00:00:00-06:00</updated><id>/2021/01/15/Initial-App-Design</id><content type="html" xml:base="/2021/01/15/Initial-App-Design.html">&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/headers/pen-and-paper.jpg&quot; alt=&quot;Pen and Paper&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageSourceCaption&quot;&gt;&lt;a href=&quot;https://unsplash.com/photos/XYogQSkSYZ8&quot;&gt;&lt;u&gt;Image Source&lt;/u&gt;&lt;/a&gt;&lt;/figcaption&gt;

&lt;p&gt;Well, I’ve finished my iOS course. Now, it is time to build my first app! Let’s get coding, right? Wrong. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;One of the things I learned in the course was about how important it is to design your app with good ol’ fashioned pen and paper before coding anything up. This is because coding is much more time- and labor-intensive that simply drawing. It is also much harder to fix mistakes or change things in your design once you’ve put it into code.&lt;/p&gt;

&lt;p&gt;That said, I grabbed an empty notebook (one with turtles on it that Ayana had bought for me for Christmas) and set to work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/turtle-notebook.jpg&quot; alt=&quot;Turtle Notebook&quot; class=&quot;blogVerticalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;It's a Turtley Awesome Christmas! :turtle::christmas_tree:&lt;/figcaption&gt;

&lt;h3 id=&quot;user-flow-diagram&quot;&gt;User Flow Diagram&lt;/h3&gt;

&lt;p&gt;The first thing I did was draw a user flow diagram. This is a diagram that uses rectangles to represent different screens/menus/etc. in your app and uses diamonds to connect them (representing actions). It tells the story of how a user moves through your app and forms the basic blueprint for your app’s navigation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/drawn-user-flow-diagram.jpg&quot; alt=&quot;User Flow Diagram&quot; class=&quot;blogVerticalImage bigImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;My (messy) user flow diagram starts at the top and proceeds down the page&lt;/figcaption&gt;

&lt;p&gt;Above, you can see the messiness that is my user flow diagram! It’s a pretty simple app, with just a splash screen, a main menu, a levels screen, and a crossword screen where the user will spend the majority of their time.&lt;/p&gt;

&lt;p&gt;I also added to the diagram a stats screen, a summary screen (for after finishing a crossword), and a settings screen, but I’m not going to implement those until after I get the main ones in the middle designed and coded up first. I’ve read that it’s important to get a minimally viable product built first and then go from there based primarily on user feedback.&lt;/p&gt;

&lt;h3 id=&quot;app-title-and-logo&quot;&gt;App Title and Logo&lt;/h3&gt;

&lt;p&gt;I first spent some time coming up with an app title and logo while working on the splash screen and main menu. Here are my logo ideas:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/drawn-logo-ideas.jpg&quot; alt=&quot;Logo Ideas&quot; class=&quot;blogVerticalImage bigImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Possible logo ideas - I eventually settled on the one in the lower right&lt;/figcaption&gt;

&lt;p&gt;While thinking about logos, I also settled on the name KameKurosu. Kame (pronounced kah-meh) means turtle in Japanese, and if you know anything about me, you know I love turtles :turtle:. Kame, which is written as 亀, has elements that sort of look like a grid, or a crossword puzzle! That led me to call the app KameKurosu, where Kurosu (pronounced ku-roh-su) means “cross”, short for crossword. In Japanese, you would write KameKurosu as 亀クロス (note that Kurosu is written in katakana since it originates from the English word, cross). To put this all into a nice, square logo, I made クロス vertical (often, Japanese text is written vertically) and centered above the “tail” of the turtle kanji. This then became the logo which I used on my drawn splash screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/drawn-splash-screen.jpg&quot; alt=&quot;Splash Screen Wireframe&quot; class=&quot;blogVerticalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Splash screen idea - logo is simple and balanced&lt;/figcaption&gt;

&lt;h3 id=&quot;main-screens-views&quot;&gt;Main Screens (Views)&lt;/h3&gt;

&lt;p&gt;Following my user flow diagram, I started drawing out each screen (also known as “views” in coding lingo). Here are the results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/drawn-main-menu.jpg&quot; alt=&quot;Main Menu Wireframe&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Main menu - inspired in part by the 漢字クロス app main menu design&lt;/figcaption&gt;

&lt;p&gt;The main menu is fairly simple, with a button for each difficulty level of crossword, from beginner to advanced. I also want to include a settings menu (top right) as well as a statistics view (lower right).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/drawn-level-begin-splash-screen.jpg&quot; alt=&quot;Level Begin Splash Screen Wireframe&quot; class=&quot;blogVerticalImage bigImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Level begin splash screen&lt;/figcaption&gt;

&lt;p&gt;The splash screen is going to be pretty simple for now with the difficulty name and the level number, although I might have some catchy art made for this in the future.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/drawn-crossword-screen.jpg&quot; alt=&quot;Crossword Wireframe&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Main view while doing a crossword - crossword at the top, clue bar in the middle, Japanese keyboard below. To the right, zoomed in depiction of a key on the keyboard as well as the clue bar.&lt;/figcaption&gt;

&lt;p&gt;The main view! When doing a crossword, the crossword will be at the top and take up the entire width of the screen (no need to pan around). The clue will be prominently displayed in the middle, with arrows on each side that you can tap to quickly go the previous or next clue. You will also be able to tap on the crossword itself to select a clue, as you would expect. Finally, the bottom area will be reserved for the keyboard (Japanese-style), where you hold and swipe a specific direction on one of the squares to input a specific character. I’ll also include some art to fill in the sides (maybe a turtle?), since Japanese keyboard are more vertical than horizontal, unlike Western keyboards. Finally, I’ll include a few buttons on the left side of the keyboard that you can tap for things like hints, to go back to the main menu, etc.&lt;/p&gt;

&lt;h3 id=&quot;clues&quot;&gt;Clues&lt;/h3&gt;

&lt;p&gt;In the main view, above, the clue is 日常 (nichi-jou), which translates to “everyday” and is a common kanji compound word (it contains the two kanji, 日 and 常). However, as I was thinking about clues, I realized there are many words in Japanese that contain kanji but also hiragana (this primarily occurs in Japanese verbs). Take the word for “to teach”, 教える (oshi-e-ru), for instance. It contains the kanji, 教, as well as the hiragana, え (e) and る (ru). In order to include these types of words as well which have both the hard-to-learn kanji as well as the easy-to-learn hiragana, I came up with the following scheme:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/drawn-clue-ideas.jpg&quot; alt=&quot;Clue Ideas for Verbs&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;The answer when the clue is a verb like 教える can be just the kanji reading, or the kanji reading plus additional hiragana readings.&lt;/figcaption&gt;

&lt;p&gt;In this scheme, I add parantheses to the clue around the hiragana that are part of the actual word but aren’t going to be included in the answer. This (1) creates more possibilities when creating puzzles (especially important as Japanese verbs tend to end in just a handful of hiragana, especially る as in 教える), (2) makes it so we still need to know the kanji reading to solve the clue, and (3) when the hiragana are not in parantheses, gives the user a “free” character or two to fill in the puzzle, as the user should be able to read hiragana very easily. This last point could help the user figure out potentially difficult cross clues containing those squares.&lt;/p&gt;

&lt;p&gt;I also noted (literally) to only build puzzles with words with at least one kanji (words without kanji exist but would defeat the purpose of the app) as well as at least a 2-syllable reading, since the minimum answer length in crosswords is two characters.&lt;/p&gt;

&lt;h3 id=&quot;hints&quot;&gt;Hints&lt;/h3&gt;

&lt;p&gt;Finally, I thought about the type of hint system I might like to have. The simplest hint system would just involve revealing the reading one square at a time. I’m guessing this is what I will start with. I could always improve it in the future. One initial idea for improvement I had was the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/drawn-hint-system-ideas.jpg&quot; alt=&quot;Hint System Ideas&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Maybe a hint system that gradually reveals the answer to the user in a mini-game like way could be interesting?&lt;/figcaption&gt;

&lt;p&gt;where the answer is revealed in a gamified, gradual way based on user input. But like I said, I’m probably not going to worry about this in the first version of the app.&lt;/p&gt;

&lt;h3 id=&quot;fonts&quot;&gt;Fonts&lt;/h3&gt;

&lt;p&gt;Another thing I did in the design stage was decide on a consistent set of fonts and colors for the app. For the fonts, I used Google fonts to help me choose. I ended up choosing a font that reminded me of bamboo for the title - &lt;a href=&quot;https://fonts.google.com/specimen/Expletus+Sans#standard-styles&quot;&gt;&lt;u&gt;Expletus Sans&lt;/u&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/expletus-sans-preview.jpg&quot; alt=&quot;Expletus Sans Font Preview&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Preview of Expletus Sans font for the title&lt;/figcaption&gt;

&lt;p&gt;For the headings I decided on a serif font - &lt;a href=&quot;https://fonts.google.com/specimen/Cormorant+Infant&quot;&gt;&lt;u&gt;Cormorant Infant&lt;/u&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/cormorant-infant-preview.jpg&quot; alt=&quot;Cormorant Infant Font Preview&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Preview of Cormorant Infant font for headings&lt;/figcaption&gt;

&lt;p&gt;And for contrast, for the subheadings and text I chose a non-serif font - &lt;a href=&quot;https://fonts.google.com/specimen/Athiti&quot;&gt;&lt;u&gt;Athiti&lt;/u&gt;&lt;/a&gt; (which apparently means “sun” in Thai?):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/athiti-preview.jpg&quot; alt=&quot;Athiti Font Preview&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Preview of Athiti font for subheadings and text&lt;/figcaption&gt;

&lt;p&gt;I might make the cormorant infant font a bit bolder and the athiti font a bit lighter. I’ll play around with it until I find something I like when I start developing the app.&lt;/p&gt;

&lt;h3 id=&quot;colors&quot;&gt;Colors&lt;/h3&gt;

&lt;p&gt;For the colors, I used colormind.io, which uses artificial intelligence (AI) to select colors for you based on colors you have already selected. I wanted a sea green color to go with the turtle aesthetic. I then just randomized the other colors over and over until I arrived at a color palette I was satisfied with. This is the palette I ended up with:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/colormind-colors.jpg&quot; alt=&quot;Color Palette Generated via colormind.io&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Color palette generated via &lt;a href=&quot;colormind.io&quot;&gt;colormind.io&lt;/a&gt; that I will use in the app's user interface and design&lt;/figcaption&gt;

&lt;p&gt;I’m thinking I’m going to use that purple as sort of an accent and text color, the grey/white for the crossword background, and the other colors for UI element backgrounds and such.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Overall, I’m pretty happy with these initial sketches and design choices! I was able to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;create a basic user flow diagram&lt;/li&gt;
  &lt;li&gt;come up with a fun title, “KameKurosu” :turtle:&lt;/li&gt;
  &lt;li&gt;design a logo that matches a turtle + crossword theme&lt;/li&gt;
  &lt;li&gt;draw up initial ideas for what I want each view to look like&lt;/li&gt;
  &lt;li&gt;and come up with some nice fonts and a pretty color scheme&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="KameKurosu" /><summary type="html">Image Source Well, I’ve finished my iOS course. Now, it is time to build my first app! Let’s get coding, right? Wrong.</summary></entry><entry><title type="html">Foundation: Part II</title><link href="/2021/01/13/iOS-Dev-II.html" rel="alternate" type="text/html" title="Foundation: Part II" /><published>2021-01-13T00:00:00-06:00</published><updated>2021-01-13T00:00:00-06:00</updated><id>/2021/01/13/iOS-Dev-II</id><content type="html" xml:base="/2021/01/13/iOS-Dev-II.html">&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/headers/nature-library.jpg&quot; alt=&quot;Nature's Library&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageSourceCaption&quot;&gt;&lt;a href=&quot;https://unsplash.com/photos/1COcTd3pRCg&quot;&gt;&lt;u&gt;Image Source&lt;/u&gt;&lt;/a&gt;&lt;/figcaption&gt;

&lt;p&gt;What a year 2020 was. Although my goal was to finish that iOS course and start on my own app, life got in the way. I was able to still learn a lot and finished about half of the course early last year. But this year, I made a New Years Resolution to start again where I left off. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;And did that resolution pay off! After many nights filled with watching lectures and writing code, I finished the entire course, did some further research on iOS development topics I was interested in, and started to seriously plan out my app!&lt;/p&gt;

&lt;p&gt;But then I realized that there was one iOS topic I hadn’t gotten much experience with in the iOS course I had taken: SwiftUI. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;SwiftUI is a relatively new iOS framework that Apple released in 2019, replacing UIKit (the older framework which I used in the course). However, most people still use UIKit because it is more mature. But… SwiftUI is the way of the future, so I’ve decided to build my app in SwiftUI.&lt;/p&gt;

&lt;p&gt;That said, only one section of my iOS development course touched on SwiftUI. So I started another course solely focused on learning this new framework. I built a few small example apps and learned the basics. I didn’t go through the whole course, though.&lt;/p&gt;

&lt;p&gt;About halfway through, I felt I was ready to venture out on my own.&lt;/p&gt;

&lt;p&gt;Finally… let’s build my dream app!&lt;/p&gt;</content><author><name></name></author><category term="KameKurosu" /><summary type="html">Image Source What a year 2020 was. Although my goal was to finish that iOS course and start on my own app, life got in the way. I was able to still learn a lot and finished about half of the course early last year. But this year, I made a New Years Resolution to start again where I left off.</summary></entry><entry><title type="html">Foundation: Part I</title><link href="/2020/03/23/iOS-Dev-I.html" rel="alternate" type="text/html" title="Foundation: Part I" /><published>2020-03-23T00:00:00-05:00</published><updated>2020-03-23T00:00:00-05:00</updated><id>/2020/03/23/iOS-Dev-I</id><content type="html" xml:base="/2020/03/23/iOS-Dev-I.html">&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/headers/nature-bridge.jpg&quot; alt=&quot;Bridge Surrounded by Nature&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageSourceCaption&quot;&gt;&lt;a href=&quot;https://unsplash.com/photos/A9cLdpV3frg&quot;&gt;&lt;u&gt;Image Source&lt;/u&gt;&lt;/a&gt;&lt;/figcaption&gt;

&lt;p&gt;Well, the pandemic is currently in full swing! I’m lucky enough to be able to continue work on my PhD remotely, but I have also gained quite a bit of extra free time… &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;That said, I decided to use that time to learn how to build iOS apps. I quickly realized that you have to have a Mac to make apps, so after a few hours of deal-hunting I found a used 2014 Mac Mini on eBay for only $250, not bad!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/mac-mini.jpg&quot; alt=&quot;Mac Mini&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;My refurbished 2014 Mac Mini&lt;/figcaption&gt;

&lt;p&gt;I also bought a wireless keyboard to use. All in all, the total cost was less than $350, much less than if I had paid for a new MacBook or iMac!&lt;/p&gt;

&lt;p&gt;I am now taking a &lt;a href=&quot;https://www.udemy.com/course/ios-13-app-development-bootcamp&quot;&gt;&lt;u&gt;course in iOS development through Udemy&lt;/u&gt;&lt;/a&gt;. I was able to get it at 90% off for less than $10 - a steal considering it has 50+ hours of content. I’m only about 20% done with the course so far, but the instructor is fantastic. She goes at a good pace for beginners like me.&lt;/p&gt;

&lt;p&gt;Here is a screenshot of me making my first app during the course!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/i-am-rich-first-app-screenshot.png&quot; alt=&quot;Screenshot from First App Development&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageCaption&quot;&gt;Going through my first app development tutorial!&lt;/figcaption&gt;

&lt;p&gt;It doesn’t really do anything - here I was just learning how to make an app with a single screen with some text and an image. That iPhone you see on the screen is a simulator tool that Apple provides on every Mac. That way, you can test your app without a physical device, if you want.&lt;/p&gt;

&lt;p&gt;Since this app, I’ve made a few more as I’ve progressed through the course. In each new app, I learned something new, be it adding navigation bars, adding buttons, styling text, getting data from external services (APIs), making nice UI layouts, etc.&lt;/p&gt;

&lt;p&gt;I really like how hands-on this course is. Hopefully, I can finish it in the next few months and have a strong enough knowledge base to start work on my own app idea!&lt;/p&gt;</content><author><name></name></author><category term="KameKurosu" /><summary type="html">Image Source Well, the pandemic is currently in full swing! I’m lucky enough to be able to continue work on my PhD remotely, but I have also gained quite a bit of extra free time…</summary></entry><entry><title type="html">The Competition</title><link href="/2020/02/09/App-Store-Research.html" rel="alternate" type="text/html" title="The Competition" /><published>2020-02-09T00:00:00-06:00</published><updated>2020-02-09T00:00:00-06:00</updated><id>/2020/02/09/App-Store-Research</id><content type="html" xml:base="/2020/02/09/App-Store-Research.html">&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/headers/nature-chess.jpg&quot; alt=&quot;Chess Pieces in a Forest&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageSourceCaption&quot;&gt;&lt;a href=&quot;https://unsplash.com/photos/NiBcChX2CKc&quot;&gt;&lt;u&gt;Image Source&lt;/u&gt;&lt;/a&gt;&lt;/figcaption&gt;

&lt;p&gt;But wait! One thing about apps, which you are probably aware of, is that the market is incredibly saturated. There is an app for everything! From workout logs to todo lists to music players to language learning apps, you’d be hard-pressed to find an app that doesn’t do what you want. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;With this in mind, before making my app (and even before learning how to make apps), I had to make sure “KanjiCross” wasn’t already built by someone else! So I came up with all the possible keywords I could think of: “Japanese”, “Crossword”, “Learn”, “Practice”, “Kanji”, “Read”, etc. as well as many Japanese keywords.&lt;/p&gt;

&lt;p&gt;I scoured the App Store for potential hits, and I (unsurprisingly) found a few that looked much like what I had dreamt up myself.&lt;/p&gt;

&lt;h3 id=&quot;competitor-app-i-japanese-crossword-puzzle&quot;&gt;Competitor App I: “Japanese Crossword Puzzle”&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/japanese-crossword-puzzle.png&quot; alt=&quot;Japanese Crossword Puzzle App Crossword Screen&quot; class=&quot;blogVerticalImage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The title of this app is self-explanatory. Because it’s so basic, this was the first hit I found. I downloaded it and tried it out. As you can probably tell from the image, these aren’t really crosswords. More like tiny word puzzles.&lt;/p&gt;

&lt;p&gt;In addition, the app uses actual clues (in Japanese). My app would simply use Japanese words (containing kanji) as the clues, with the answers being the readings.&lt;/p&gt;

&lt;p&gt;Finally, this app is just plain ugly - a solid grey background? Who thought that was a good idea? Finally, this app seems to be geared primarily toward native speakers since the app is fully in Japanese.&lt;/p&gt;

&lt;h3 id=&quot;competitor-app-ii-japanese-crossword&quot;&gt;Competitor App II: “Japanese Crossword”&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/japanese-crossword.png&quot; alt=&quot;Japanese Crossword App Crossword Screen&quot; class=&quot;blogVerticalImage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This app is very slick. But… it’s basically a copy of the billion other mini-crossword games (Wordscapes, Word Cookies, Word Connect, etc.).&lt;/p&gt;

&lt;p&gt;However, it introduces the concept I’m going for - kanji-containing words as clues and their readings as the answers. It excels at what it does, but I wouldn’t call this a true crossword app. The “crosswords” are small, typically only contain a handful of words, have little overlap between clues, and you are helped tremendously by being given the kana that are used in each word’s reading (you just swipe them in order). This seems too easy to me.&lt;/p&gt;

&lt;p&gt;Maybe I’ll make the hint system in my app provide a swipeable set of characters similar to this app instead of the actual answer? Also, it uses annoying ads that pop up randomly, with no option to pay to opt out - a dealbreaker for many users. However, it is the only crossword app I found that is geared toward Japanese learners, and the artwork is high quality.&lt;/p&gt;

&lt;h3 id=&quot;competitor-app-iii-漢字クロス-kanji-cross&quot;&gt;Competitor App III: “漢字クロス” (Kanji Cross)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/kanji-kurosu-menu.png&quot; alt=&quot;Kanji Kurosu App Menu Screen&quot; class=&quot;blogVerticalImageSmall&quot; style=&quot;margin-left: 40px&quot; /&gt;
&lt;img src=&quot;/assets/images/blog-kamekurosu/kanji-kurosu.png&quot; alt=&quot;Kanji Kurosu App Crossword Screen&quot; class=&quot;blogVerticalImageSmall&quot; style=&quot;margin-left: 10px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of all these, this one is most similar to my idea (it even has the same name!). It has all of the basic functionality and the same exact goal as my potential app: use crosswords to practice reading kanji.&lt;/p&gt;

&lt;p&gt;However, the app’s audience is completely different. It is geared toward native speakers, not Japanese-learners. That said, the app is entirely in Japanese, and I could barely do the “easy” level, even after studying Japanese for years. Overall, it seems geared toward natives who want to practice difficult words which often use rare kanji.&lt;/p&gt;

&lt;p&gt;For my app, the menu, options, etc. would be in the local language of the user (with the option to switch to Japanese). Most importantly, my app’s crosswords would be much easier since my audience is Japanese learners, not native speakers. For example, the easiest levels would only use Japanese words and kanji that are extremely frequent (e.g. top 1000 words).&lt;/p&gt;

&lt;p&gt;The other main thing I noticed is that the clue text was much too small (and at the top of the screen). I thought a more natural place would be the middle of the screen between the keyboard and the puzzle. I also noted to make my clues much bigger and stand out a bit more.&lt;/p&gt;

&lt;p&gt;However, I did really like the layout of the app’s Japanese keyboard and the simple menu system and decided to use those as inspiration in my own app design.&lt;/p&gt;

&lt;h3 id=&quot;competitor-app-iv-クロスワードfan-crossword-fan&quot;&gt;Competitor App IV: “クロスワードFAN” (Crossword Fan)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/kurosuwaado-fan.png&quot; alt=&quot;Crossword Fan Crossword Screen&quot; class=&quot;blogVerticalImage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a regular crossword app, intended for native speakers. It’s pretty ugly, although not as ugly as “Japanese Crossword Puzzle”!&lt;/p&gt;

&lt;p&gt;It’s got some nice relaxing music and an audio option for each clue, at least!&lt;/p&gt;

&lt;h3 id=&quot;in-summary&quot;&gt;In Summary&lt;/h3&gt;

&lt;p&gt;There were a few other apps I found as well, but these were the most relevant. A few things stood out.&lt;/p&gt;

&lt;p&gt;My main conclusion is that these apps are either (a) too difficult as they target native speakers or (b) too easy (in my opinion) for learners to get good reading practice.&lt;/p&gt;

&lt;p&gt;Note also that all of these apps get their revenue solely from ads. I hate ads, so I plan on making my app free (no ads) for the first few levels. However, I’ll have in-app purchases to unlock the rest of the puzzles.&lt;/p&gt;

&lt;p&gt;Overall, I am excited to find out that my idea has not been developed already - a good sign! My next step is to, well, learn how to actually make iOS apps!&lt;/p&gt;</content><author><name></name></author><category term="KameKurosu" /><summary type="html">Image Source But wait! One thing about apps, which you are probably aware of, is that the market is incredibly saturated. There is an app for everything! From workout logs to todo lists to music players to language learning apps, you’d be hard-pressed to find an app that doesn’t do what you want.</summary></entry><entry><title type="html">The Idea</title><link href="/2020/02/04/The-Idea.html" rel="alternate" type="text/html" title="The Idea" /><published>2020-02-04T00:00:00-06:00</published><updated>2020-02-04T00:00:00-06:00</updated><id>/2020/02/04/The-Idea</id><content type="html" xml:base="/2020/02/04/The-Idea.html">&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/headers/forest-road.jpg&quot; alt=&quot;Forest Road&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageSourceCaption&quot;&gt;&lt;a href=&quot;https://unsplash.com/photos/5hvn-2WW6rY&quot;&gt;&lt;u&gt;Image Source&lt;/u&gt;&lt;/a&gt;&lt;/figcaption&gt;

&lt;p&gt;I love crosswords. I do them all the time (often to the detriment of my Japanese studies). This led me to an app idea: solve Japanese crossword puzzles geared toward learners of Japanese that make practicing kanji relaxing, motivating, educational, and most of all, fun. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;In very basic terms, the proposed app, which I am calling KanjiCross for now, gamifies kanji-reading practice by having the user solve crossword puzzles where the clues are kanji-containing words (e.g. 車輪) and the answers are the readings, in katakana (e.g. シャリン=“sha-ri-n”). Each katakana character would take up one square in the crossword.&lt;/p&gt;

&lt;p&gt;In cases where the user might know only part of a reading (or none), the user can look at the other clues that have overlapping answers in the puzzle, similar to how you might know the answer to a difficult clue after doing a few other clues in an English crossword. Thus, a learner can solve an entire puzzle without immediately knowing every single reading. However, after solving the puzzle, they will be reinforcing every reading, even those they didn’t know immediately or had forgotten. For cases where the user gets stuck, they can use hints, which I’m thinking will just provide the katakana character for the currently selected square in the crossword.&lt;/p&gt;

&lt;p&gt;All in all, I am very excited about this idea. I don’t know how popular it will be in the Japanese language-learning community, but honestly, I sort of just want to make it for myself. And if other people find it useful, all the better!&lt;/p&gt;

&lt;p&gt;While I have never developed apps before, I have learned a lot about programming during my PhD (primarily using python for data science applications). I also learned a little bit of web development during an internship a few years ago, so I’m not too scared of the programming hurdle involved. However, I recognize that developing for iOS is very different from data science or web development. Time to learn!&lt;/p&gt;</content><author><name></name></author><category term="KameKurosu" /><summary type="html">Image Source I love crosswords. I do them all the time (often to the detriment of my Japanese studies). This led me to an app idea: solve Japanese crossword puzzles geared toward learners of Japanese that make practicing kanji relaxing, motivating, educational, and most of all, fun.</summary></entry><entry><title type="html">A Spark</title><link href="/2020/01/28/The-Spark.html" rel="alternate" type="text/html" title="A Spark" /><published>2020-01-28T00:00:00-06:00</published><updated>2020-01-28T00:00:00-06:00</updated><id>/2020/01/28/The-Spark</id><content type="html" xml:base="/2020/01/28/The-Spark.html">&lt;p&gt;&lt;img src=&quot;/assets/images/blog-kamekurosu/headers/spark.jpg&quot; alt=&quot;A Spark&quot; class=&quot;blogHorizontalImage&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;blogImageSourceCaption&quot;&gt;&lt;a href=&quot;https://unsplash.com/photos/8IGKYypIZ9k&quot;&gt;&lt;u&gt;Image Source&lt;/u&gt;&lt;/a&gt;&lt;/figcaption&gt;

&lt;p&gt;If you didn’t know, I have been learning Japanese ever since I met my wife, Ayana, in 2014 (and yes, my Japanese still sucks even in 2020). One of the most difficult aspects of learning Japanese is reading (and writing). This led me to a question: how can I make Japanese reading practice more fun? &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Ideally, I could just read the things I usually read, but in Japanese (sci-fi, news, historical fiction, etc.). However, I’m still not even close to being able to read novels. I can barely read Japanese news articles. I’m sure one day, my Japanese will get good enough to read these more difficult media, but for now, I want something that is more exciting than what I usually practice with (looking at you, Japanese childrens’ books and manga).&lt;/p&gt;

&lt;p&gt;The reason reading and writing are so difficult is that Japanese uses three unique character sets. Two of them are quite easy to learn but one is notoriously difficult, even for native speakers.&lt;/p&gt;

&lt;p&gt;The two “easy” character sets are collectively known as the kana, which are relatively simple to write and only contain 46 characters each. Hiragana is the more common of the two kana. It is used in many words, is the sole character set for indicating grammar, and is the first set that kids in Japan learn to read. For example, here is “hi-ra-ga-na” written in hiragana: ひらがな. Each character is a single syllable (such as “hi”=ひ, pronounced “hee”).&lt;/p&gt;

&lt;p&gt;The second “easy” character set is katakana. It is a bit more sharp-looking than hiragana, but it is quite easy to learn as well, mainly because every katakana character has a hiragana character with the same pronunciation, sort of analogous to UPPER and lowercase letters in English. Its primary use is for emphasis and for converting foreign words into Japanese. For example, “America” is written in katakana as “a-me-ri-ka” (アメリカ) since it is not a native Japanese word. If this were written in hiragana, it would look like あめりか. Note how similar these characters look compared with their respective katakana characters, above, but also notice how katakana is more angular and sharp than hiragana.&lt;/p&gt;

&lt;p&gt;The final character set, kanji, takes years to learn, even for native speakers. This is because there are thousands of kanji. Kanji are the more complicated-looking characters that were imported from China when the Japanese writing system was developed thousands of years ago. Here are some examples of Japanese words using kanji: 車輪 (“sha-rin”, wheel); 車 (“kuruma”, car); 確認 (“kaku-nin”, confirm). Note that the kanji for the word for car (車) is the same kanji that appears in the compound kanji word for wheel (車輪). However, the reading is different (“kuruma” vs. “sha”).&lt;/p&gt;

&lt;p&gt;So not only are there thousands of kanji to learn the meanings and readings of, but each can take on multiple readings depending on what word it is being used in! This same phenomenon also occurs (although to a lesser degree) in English. For example, in “cough” and “through”, the -ough is pronounced differently, although it looks the same in writing. Just as it is important to learn these different English pronunciations, it is important to learn the different readings of Japanese kanji characters. However, this takes years of study and practice.&lt;/p&gt;

&lt;p&gt;While there are many tools out there to help people learn each kanji’s various readings, there are far fewer that focus on practicing reading kanji in the context of Japanese words. And even less that strive to do this in a fun, relaxing, and motivating (e.g. gamified) way. While reading native content is by far the best way to practice reading Japanese, sometimes it is not so fun, especially in the early stages when piecing together entire sentences is still quite difficult. Sometimes, instead of reading native content, you just want to sit back, relax, and do a nice, enjoyable… crossword?&lt;/p&gt;</content><author><name></name></author><category term="KameKurosu" /><summary type="html">Image Source If you didn’t know, I have been learning Japanese ever since I met my wife, Ayana, in 2014 (and yes, my Japanese still sucks even in 2020). One of the most difficult aspects of learning Japanese is reading (and writing). This led me to a question: how can I make Japanese reading practice more fun?</summary></entry></feed>